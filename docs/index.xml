<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Violinist documentation</title>
    <link>https://docs.violinist.io/</link>
    <description>Recent content on Violinist documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://docs.violinist.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>security_updates_only</title>
      <link>https://docs.violinist.io/security-updates-only/</link>
      <pubDate>Fri, 05 Feb 2021 11:11:29 +0100</pubDate>
      
      <guid>https://docs.violinist.io/security-updates-only/</guid>
      <description>Configuration name: security_updates_only
type: int
default: 0
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;security_updates_only&amp;#34;: 0  } } } Only update security updates to dependencies.
Explanation If you are only interested in getting automated pull requests for security updates to your dependencies, this option will do that for you.
Example Say you have a project with a lot of updates coming in all the time, but you are only interested in getting security updates through violinist.</description>
    </item>
    
    <item>
      <title>default_branch</title>
      <link>https://docs.violinist.io/default_branch/</link>
      <pubDate>Mon, 01 Jul 2019 17:46:00 +0200</pubDate>
      
      <guid>https://docs.violinist.io/default_branch/</guid>
      <description>Configuration name: default_branch
type: string
default: &#39;&#39;
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;default_branch&amp;#34;: &amp;#34;&amp;#34;  } } } Indicate what branch you want the Violinist pull requests created against.
Explanation Different projects uses different workflows for their branches. For example, your default branch in your VCS provider might be your production branch (for example master) while you want the pull requests to be created towards a development branch (for example develop).</description>
    </item>
    
    <item>
      <title>assignees</title>
      <link>https://docs.violinist.io/assignees/</link>
      <pubDate>Thu, 04 Apr 2019 20:22:04 +0200</pubDate>
      
      <guid>https://docs.violinist.io/assignees/</guid>
      <description>This feature is only available on the agency and enterprise plans.
 Configuration name: assignees
type: array
default: []
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;assignees&amp;#34;: []  } } } An array of assignees that this project will use as the default assignee for new pull requests.
 NB! The value of this option depends on your VCS provider. For github this will be an array of usernames.</description>
    </item>
    
    <item>
      <title>number_of_concurrent_updates</title>
      <link>https://docs.violinist.io/number_of_concurrent_updates/</link>
      <pubDate>Thu, 06 Dec 2018 19:28:34 +0100</pubDate>
      
      <guid>https://docs.violinist.io/number_of_concurrent_updates/</guid>
      <description>Configuration name: number_of_concurrent_updates
type: int
default: 0
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;number_of_concurrent_updates&amp;#34;: 0  } } } Indicate how many open pull requests you want at a time.
Explanation If you have a whole range of build steps and environments for a project per branch, having a bunch of branches come in from Violinist might clog up your build pipeline or spin up many servers. If this is the case, and you want to throttle the pull requests Violinist keeps open, then this option is for you.</description>
    </item>
    
    <item>
      <title>one_pull_request_per_package</title>
      <link>https://docs.violinist.io/one-pull-request-per-package/</link>
      <pubDate>Thu, 06 Dec 2018 19:28:34 +0100</pubDate>
      
      <guid>https://docs.violinist.io/one-pull-request-per-package/</guid>
      <description>Configuration name: one_pull_request_per_package
type: int
default: 0
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;one_pull_request_per_package&amp;#34;: 0  } } } Indicate whether you want one pull request per package or not.
Explanation Some packages update more often than you do maintenance on your project. If this is the case, you might find you have 4 pull requests for the version 8.0.2 through 8.0.5 of a certain package. This would in turn end up with you closing 3 pull requests, and merging one.</description>
    </item>
    
    <item>
      <title>allow_updates_beyond_constraint</title>
      <link>https://docs.violinist.io/upgrading-beyond-ranges/</link>
      <pubDate>Sun, 25 Mar 2018 10:50:02 +0200</pubDate>
      
      <guid>https://docs.violinist.io/upgrading-beyond-ranges/</guid>
      <description>Configuration name: allow_updates_beyond_constraint
type: int
default: 1
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;allow_updates_beyond_constraint&amp;#34;: 1  } } } Indicate whether or not we can try to update a package even if it is beyond the range specified in composer.json. Defaults to 1 (true).
Explanation Strictly speaking, if your composer.json specifies that you want to have the package vendor/package in the version range ~1.0.0, then composer will install all version in the range 1.</description>
    </item>
    
    <item>
      <title>blacklist</title>
      <link>https://docs.violinist.io/blacklisting-projects/</link>
      <pubDate>Sun, 25 Mar 2018 10:50:02 +0200</pubDate>
      
      <guid>https://docs.violinist.io/blacklisting-projects/</guid>
      <description>Configuration name: blacklist
type: array
default: []
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;blacklist&amp;#34;: []  } } } An array of packages to always ignore while running updates with Violinist. Defaults to nothing.
Explanation Some times a version of your package comes out that will never be compatible with your codebase. Some times this means you have to do some refactoring, but you only have time to do so some time in the future.</description>
    </item>
    
    <item>
      <title>bundled_packages</title>
      <link>https://docs.violinist.io/bundled-packages/</link>
      <pubDate>Sun, 25 Mar 2018 10:50:02 +0200</pubDate>
      
      <guid>https://docs.violinist.io/bundled-packages/</guid>
      <description>Configuration name: bundled_packages
type: array
default: []
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;bundled_packages&amp;#34;: []  } } } An array of packages to bundle with other packages, keyed by the main package.
 Quite often you probably want to also avoid getting pull requests for the packages you are bundling. To do this, you probably want to blacklist the packages in question.
 Explanation Some times you depend on packages that are typically released in new versions at the same time.</description>
    </item>
    
    <item>
      <title>Composer commands used</title>
      <link>https://docs.violinist.io/commands/</link>
      <pubDate>Sun, 25 Mar 2018 10:50:02 +0200</pubDate>
      
      <guid>https://docs.violinist.io/commands/</guid>
      <description>Looking for updates To identify the updates that are available, violinist will run the following command:
composer outdated -D -m You can read more about this command on the official composer website
The two options mean as follows:
--direct (-D): Restricts the list of packages to your direct dependencies. --minor-only (-m): Only shows packages that have minor SemVer-compatible updates. There are still several ways this can be manipulated. See the config options for details.</description>
    </item>
    
    <item>
      <title>run_scripts</title>
      <link>https://docs.violinist.io/run-scripts/</link>
      <pubDate>Sun, 25 Mar 2018 10:50:02 +0200</pubDate>
      
      <guid>https://docs.violinist.io/run-scripts/</guid>
      <description>Configuration name: run_scripts
type: int
default: 1
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;run_scripts&amp;#34;: 1  } } } Indicate if you want to run scripts as part of your update commands. Or rather if you want to avoid running scripts.
This translates to using the --no-scripts option in composer.
Explanation Some times you have projects that do magic things as part of their installation or update commands. For example creating databases or clearing Redis cache.</description>
    </item>
    
    <item>
      <title>timeframe_disallowed</title>
      <link>https://docs.violinist.io/timeframe-disallowed/</link>
      <pubDate>Sun, 25 Mar 2018 10:50:02 +0200</pubDate>
      
      <guid>https://docs.violinist.io/timeframe-disallowed/</guid>
      <description>Configuration name: timeframe_disallowed
type: string
default: 0
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;timeframe_disallowed&amp;#34;: 0  } } } Indicate what timeframe the updater are allowed and disallowed to run.
Explanation By default, violinist will try to run updates all of the time. When a new package is released, or when it is time to rebase the existing pull requests. If you are actively working on a project during work hours, this can be either annoying or impractical.</description>
    </item>
    
    <item>
      <title>timezone</title>
      <link>https://docs.violinist.io/timezone/</link>
      <pubDate>Sun, 25 Mar 2018 10:50:02 +0200</pubDate>
      
      <guid>https://docs.violinist.io/timezone/</guid>
      <description>Configuration name: timezone
type: string
default: +0000
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;timezone&amp;#34;: &amp;#34;+0000&amp;#34;  } } } Indicate what timezone to use for the option timeframe_disallowed.
Explanation It would not help much to restrict the timeframe for the updates to be run, unless you could also say what timezone you were talking about. This is what the timezone option is for.
Example Say you want to only update the project with Violinist outside working hours, and you are located in the timezone PDT.</description>
    </item>
    
    <item>
      <title>update_dev_dependencies</title>
      <link>https://docs.violinist.io/update_dev_dependencies/</link>
      <pubDate>Sun, 25 Mar 2018 10:50:02 +0200</pubDate>
      
      <guid>https://docs.violinist.io/update_dev_dependencies/</guid>
      <description>Configuration name: update_dev_dependencies
type: int
default: 1
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;update_dev_dependencies&amp;#34;: 1  } } } Indicate whether or not you want Violinist to also update your dev dependencies. The default behavior is to also update these.
Explanation If you have a project where you for some reason do not want to update your dev dependencies, you can use this option.
Example Say you wanted to avoid updating all of your dev dependencies.</description>
    </item>
    
    <item>
      <title>update_with_dependencies</title>
      <link>https://docs.violinist.io/update-with-dependencies/</link>
      <pubDate>Sun, 25 Mar 2018 10:50:02 +0200</pubDate>
      
      <guid>https://docs.violinist.io/update-with-dependencies/</guid>
      <description>Configuration name: update_with_dependencies
type: int
default: 1
{ &amp;#34;name&amp;#34;: &amp;#34;company/project&amp;#34;, &amp;#34;extra&amp;#34;: { &amp;#34;violinist&amp;#34;: { &amp;#34;update_with_dependencies&amp;#34;: 1  } } } Indicate whether or not we update a package using the --with-dependencies flag for composer. Defaults to 1 (true).
Explanation When you update a package that also depend on other packages, which probably in turn are described as dependencies with semantic versioning, you might want to update to the newest version of the depended-upon packages as well, since these are compatible and will include bug fixes and improvements for you, in a compatible way.</description>
    </item>
    
  </channel>
</rss>
